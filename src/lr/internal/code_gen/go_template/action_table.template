package go_template

import (
    lr "github.com/pattyshack/abc/src/lr/internal"
)

template ActionTable {
    TableKeyType        string

    StateIdType         string

    SymbolIdType        string

    EndSymbolId         string
    WildcardSymbolId    string

    ActionTableType     string

    ActionType          string

    AcceptAction        string
    ShiftAction         string
    ReduceAction        string

    OrderedStates       []*lr.ItemSet
    NonTerminals        []*lr.Term

    ActionTable         string

    OrderedSymbolIds    []string
    SymbolIdToConst     map[string]string
}

%%
type $TableKeyType struct {
    $StateIdType
    $SymbolIdType
}

type $ActionTableType map[$TableKeyType]*$ActionType

func (table $ActionTableType) Get(
    stateId $StateIdType,
    symbolId $SymbolIdType) (
    *$ActionType,
    bool) {

    action, ok := table[$TableKeyType{stateId, symbolId}]
    if ok {
        return action, ok
    }

    action, ok = table[$TableKeyType{stateId, $WildcardSymbolId}]
    return action, ok
}

var (
[[-for _, state := range OrderedStates]]
    $(state.CodeGenAction) = &$ActionType{$ShiftAction, $(state.CodeGenConst), 0}
[[-end-]]

[[-for _, term := range NonTerminals-]]
    [[-for _, clause := range term.Clauses]]
    $(clause.CodeGenReduceAction) = &$ActionType{$ReduceAction, 0, $(clause.CodeGenReducerNameConst)}
    [[-end-]]
[[-end]]
)

var $ActionTable = $ActionTableType{
[[-for _, state := range OrderedStates-]]
    [[-for _, item := range state.Items-]]
        [[-$

        if !item.IsReduce {
            continue
        }

        if item.Name != lr.AcceptRule || item.LookAhead != lr.EndMarker {
            continue
        }

        ]]
    {$(state.CodeGenConst), $EndSymbolId}: &$ActionType{$AcceptAction, 0, 0},
    [[-end-]]
[[-end-]]

[[-for _, state := range OrderedStates-]]
    [[-for _, symbol := range OrderedSymbolIds-]]
        [[-$

        child, ok := state.Goto[symbol]
        if !ok {
            continue
        }

        ]]
    {$(state.CodeGenConst), $(SymbolIdToConst[symbol])}: $(child.CodeGenAction),
    [[-end-]]
[[-end-]]

[[-for _, state := range OrderedStates-]]
    [[-for _, item := range state.Items-]]
        [[-$

        if !item.IsReduce {
            continue
        }

        if item.Name == lr.AcceptRule && item.LookAhead == lr.EndMarker {
            continue
        }

        idConst := SymbolIdToConst[item.LookAhead]
        reduceAction := item.Clause.CodeGenReduceAction

        ]]
    {$(state.CodeGenConst), $idConst}: $reduceAction,
    [[-end-]]
[[-end]]
}
