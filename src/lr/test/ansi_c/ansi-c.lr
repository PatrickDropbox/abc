%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%type statement
%type logical_or_expression
%type constant_expression
%type struct_or_union_specifier
%type unary_expression
%type additive_expression
%type enumerator
%type assignment_operator
%type specifier_qualifier_list
%type struct_declarator_list
%type external_declaration
%type expression
%type direct_abstract_declarator
%type inclusive_or_expression
%type parameter_declaration
%type argument_expression_list
%type shift_expression
%type relational_expression
%type struct_or_union
%type parameter_list
%type cast_expression
%type multiplicative_expression
%type struct_declaration
%type enum_specifier
%type enumerator_list
%type type_qualifier_list
%type parameter_type_list
%type conditional_expression
%type init_declarator_list
%type declaration
%type declaration_specifiers
%type pointer
%type abstract_declarator
%type labeled_statement
%type selection_statement
%type exclusive_or_expression
%type assignment_expression
%type jump_statement
%type unary_operator
%type statement_list
%type type_name
%type initializer
%type initializer_list
%type iteration_statement
%type postfix_expression
%type type_specifier
%type translation_unit
%type equality_expression
%type struct_declaration_list
%type type_qualifier
%type declarator
%type identifier_list
%type function_definition
%type logical_and_expression
%type struct_declarator
%type direct_declarator
%type primary_expression
%type init_declarator
%type compound_statement
%type declaration_list
%type expression_statement
%type and_expression
%type storage_class_specifier

%start translation_unit

primary_expression ->
    a: IDENTIFIER |
    b: CONSTANT |
    c: STRING_LITERAL |
    d: '(' expression ')'

postfix_expression ->
    a: primary_expression |
    b: postfix_expression '[' expression ']' |
    c: postfix_expression '(' ')' |
    d: postfix_expression '(' argument_expression_list ')' |
    e: postfix_expression '.' IDENTIFIER |
    f: postfix_expression PTR_OP IDENTIFIER |
    g: postfix_expression INC_OP |
    h: postfix_expression DEC_OP

argument_expression_list ->
    a: assignment_expression |
    b: argument_expression_list ',' assignment_expression

unary_expression ->
    a: postfix_expression |
    b: INC_OP unary_expression |
    c: DEC_OP unary_expression |
    d: unary_operator cast_expression |
    e: SIZEOF unary_expression |
    f: SIZEOF '(' type_name ')'

unary_operator ->
    a: '&' |
    b: '*' |
    c: '+' |
    d: '-' |
    e: '~' |
    f: '!'

cast_expression ->
    a: unary_expression |
    b: '(' type_name ')' cast_expression

multiplicative_expression ->
    a: cast_expression |
    b: multiplicative_expression '*' cast_expression |
    c: multiplicative_expression '/' cast_expression |
    d: multiplicative_expression '%' cast_expression

additive_expression ->
    a: multiplicative_expression |
    b: additive_expression '+' multiplicative_expression |
    c: additive_expression '-' multiplicative_expression

shift_expression ->
    a: additive_expression |
    b: shift_expression LEFT_OP additive_expression |
    c: shift_expression RIGHT_OP additive_expression

relational_expression ->
    a: shift_expression |
    b: relational_expression '<' shift_expression |
    c: relational_expression '>' shift_expression |
    d: relational_expression LE_OP shift_expression |
    e: relational_expression GE_OP shift_expression

equality_expression ->
    a: relational_expression |
    b: equality_expression EQ_OP relational_expression |
    c: equality_expression NE_OP relational_expression

and_expression ->
    a: equality_expression |
    b: and_expression '&' equality_expression

exclusive_or_expression ->
    a: and_expression |
    b: exclusive_or_expression '^' and_expression

inclusive_or_expression ->
    a: exclusive_or_expression |
    b: inclusive_or_expression '|' exclusive_or_expression

logical_and_expression ->
    a: inclusive_or_expression |
    b: logical_and_expression AND_OP inclusive_or_expression

logical_or_expression ->
    a: logical_and_expression |
    b: logical_or_expression OR_OP logical_and_expression

conditional_expression ->
    a: logical_or_expression |
    b: logical_or_expression '?' expression ':' conditional_expression

assignment_expression ->
    a: conditional_expression |
    b: unary_expression assignment_operator assignment_expression

assignment_operator ->
    a: '=' |
    b: MUL_ASSIGN |
    c: DIV_ASSIGN |
    d: MOD_ASSIGN |
    e: ADD_ASSIGN |
    f: SUB_ASSIGN |
    g: LEFT_ASSIGN |
    h: RIGHT_ASSIGN |
    i: AND_ASSIGN |
    j: XOR_ASSIGN |
    k: OR_ASSIGN

expression ->
    a: assignment_expression |
    b: expression ',' assignment_expression

constant_expression ->
    a: conditional_expression

declaration ->
    a: declaration_specifiers ';' |
    b: declaration_specifiers init_declarator_list ';'

declaration_specifiers ->
    a: storage_class_specifier |
    b: storage_class_specifier declaration_specifiers |
    c: type_specifier |
    d: type_specifier declaration_specifiers |
    e: type_qualifier |
    f: type_qualifier declaration_specifiers

init_declarator_list ->
    a: init_declarator |
    b: init_declarator_list ',' init_declarator

init_declarator ->
    a: declarator |
    b: declarator '=' initializer

storage_class_specifier ->
    a: TYPEDEF |
    b: EXTERN |
    c: STATIC |
    d: AUTO |
    e: REGISTER

type_specifier ->
    a: VOID |
    b: CHAR |
    c: SHORT |
    d: INT |
    e: LONG |
    f: FLOAT |
    g: DOUBLE |
    h: SIGNED |
    i: UNSIGNED |
    j: struct_or_union_specifier |
    k: enum_specifier |
    l: TYPE_NAME

struct_or_union_specifier ->
    a: struct_or_union IDENTIFIER '{' struct_declaration_list '}' |
    b: struct_or_union '{' struct_declaration_list '}' |
    c: struct_or_union IDENTIFIER

struct_or_union ->
    a: STRUCT |
    b: UNION

struct_declaration_list ->
    a: struct_declaration |
    b: struct_declaration_list struct_declaration

struct_declaration ->
    a: specifier_qualifier_list struct_declarator_list ';'

specifier_qualifier_list ->
    a: type_specifier specifier_qualifier_list |
    b: type_specifier |
    c: type_qualifier specifier_qualifier_list |
    d: type_qualifier

struct_declarator_list ->
    a: struct_declarator |
    b: struct_declarator_list ',' struct_declarator

struct_declarator ->
    a: declarator |
    b: ':' constant_expression |
    c: declarator ':' constant_expression

enum_specifier ->
    a: ENUM '{' enumerator_list '}' |
    b: ENUM IDENTIFIER '{' enumerator_list '}' |
    c: ENUM IDENTIFIER

enumerator_list ->
    a: enumerator |
    b: enumerator_list ',' enumerator

enumerator ->
    a: IDENTIFIER |
    b: IDENTIFIER '=' constant_expression

type_qualifier ->
    a: CONST |
    b: VOLATILE

declarator ->
    a: pointer direct_declarator |
    b: direct_declarator

direct_declarator ->
    a: IDENTIFIER |
    b: '(' declarator ')' |
    c: direct_declarator '[' constant_expression ']' |
    d: direct_declarator '[' ']' |
    e: direct_declarator '(' parameter_type_list ')' |
    f: direct_declarator '(' identifier_list ')' |
    g: direct_declarator '(' ')'

pointer ->
    a: '*' |
    b: '*' type_qualifier_list |
    c: '*' pointer |
    d: '*' type_qualifier_list pointer

type_qualifier_list ->
    a: type_qualifier |
    b: type_qualifier_list type_qualifier


parameter_type_list ->
    a: parameter_list |
    b: parameter_list ',' ELLIPSIS

parameter_list ->
    a: parameter_declaration |
    b: parameter_list ',' parameter_declaration

parameter_declaration ->
    a: declaration_specifiers declarator |
    b: declaration_specifiers abstract_declarator |
    c: declaration_specifiers

identifier_list ->
    a: IDENTIFIER |
    b: identifier_list ',' IDENTIFIER

type_name ->
    a: specifier_qualifier_list |
    b: specifier_qualifier_list abstract_declarator

abstract_declarator ->
    a: pointer |
    b: direct_abstract_declarator |
    c: pointer direct_abstract_declarator

direct_abstract_declarator ->
    a: '(' abstract_declarator ')' |
    b: '[' ']' |
    c: '[' constant_expression ']' |
    d: direct_abstract_declarator '[' ']' |
    e: direct_abstract_declarator '[' constant_expression ']' |
    f: '(' ')' |
    g: '(' parameter_type_list ')' |
    h: direct_abstract_declarator '(' ')' |
    i: direct_abstract_declarator '(' parameter_type_list ')'

initializer ->
    a: assignment_expression |
    b: '{' initializer_list '}' |
    c: '{' initializer_list ',' '}'

initializer_list ->
    a: initializer |
    b: initializer_list ',' initializer

statement ->
    a: labeled_statement |
    b: compound_statement |
    c: expression_statement |
    d: selection_statement |
    e: iteration_statement |
    f: jump_statement

labeled_statement ->
    a: IDENTIFIER ':' statement |
    b: CASE constant_expression ':' statement |
    c: DEFAULT ':' statement

compound_statement ->
    a: '{' '}' |
    b: '{' statement_list '}' |
    c: '{' declaration_list '}' |
    d: '{' declaration_list statement_list '}'

declaration_list ->
    a: declaration |
    b: declaration_list declaration

statement_list ->
    a: statement |
    b: statement_list statement

expression_statement ->
    a: ';' |
    b: expression ';'

selection_statement ->
    a: IF '(' expression ')' statement |
    b: IF '(' expression ')' statement ELSE statement |
    c: SWITCH '(' expression ')' statement

iteration_statement ->
    a: WHILE '(' expression ')' statement |
    b: DO statement WHILE '(' expression ')' ';' |
    c: FOR '(' expression_statement expression_statement ')' statement |
    d: FOR '(' expression_statement expression_statement expression ')' statement

jump_statement ->
    a: GOTO IDENTIFIER ';' |
    b: CONTINUE ';' |
    c: BREAK ';' |
    d: RETURN ';' |
    e: RETURN expression ';'

translation_unit ->
    a: external_declaration |
    b: translation_unit external_declaration

external_declaration ->
    a: function_definition |
    b: declaration

function_definition ->
    a: declaration_specifiers declarator declaration_list compound_statement |
    b: declaration_specifiers declarator compound_statement |
    c: declarator declaration_list compound_statement |
    d: declarator compound_statement

%%lang_specs{
# The additional lang_specs section is specified in yaml
go:
    package: ansi_c

    prefix: C
}%%

