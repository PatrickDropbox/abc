IMPORTS = [
        'java.io.DataInputStream',
        'java.io.DataOutputStream',
        'java.util.Vector',
        'scala.collection.JavaConversions._'
        ]

# class name -> (comment, {name -> bit})
ACCESS_FLAGS = {
        'ClassAccessFlags': (
                'see table 4.1-A / page 71-72',
                {
                    'public':     0x0001,
                    'final':      0x0010,
                    'super':      0x0020,
                    'interface':  0x0200,
                    'abstract':   0x0400,
                    'synthetic':  0x1000,
                    'annotation': 0x2000,
                    'enum':       0x4000,
                }),
        }


class Writer(object):
    def __init__(self):
        self.indent = 0
        self.content = []

    def push(self):
        self.indent += 1

    def pop(self):
        self.indent -= 1
        assert self.indent >= 0

    def write(self, s):
        line = '%s%s' % ('    ' * self.indent, s) if s else ''
        self.content.append(line)

    def body(self):
        return '\n'.join(self.content)

def main():
    w = Writer()
    push = w.push
    pop = w.pop
    write = w.write

    write('// AUTO-GENERATED BY gen_access_flags.py')
    IMPORTS.sort()
    for i in IMPORTS:
        write('import %s' % i)
    write('')
    write('')

    for className, (comment, nameBits) in ACCESS_FLAGS.items():
        nameBits = nameBits.items()
        nameBits.sort(key=lambda x: x[1])

        write('// %s' % comment)
        write('class %s {' % className)
        push()

        # fields
        for name, _ in nameBits:
            write('var is%s = false' % name.title())
        write('')

        # debug string
        write('def debugString(): String = {')
        push()

        write('var flagStrings = new Vector[String]()')
        write('')

        for name, bit in nameBits:
            write('if (is%s) {' % name.title())
            push()
            write('flagStrings.add("%s")' % name.upper())
            pop()
            write('}')

        write('')
        write('var result = ""')
        write('for (s <- flagStrings) {')
        push()
        write('if (result.equals("")) {')
        push()
        write('result = s')
        pop()
        write('} else {')
        push()
        write('result += ", " + s')
        pop()
        write('}')
        pop()
        write('}')
        write('')
        write('return result')

        pop()
        write('}')
        write('')

        # serialize
        write('def serialize(output: DataOutputStream) {')
        push()

        write('var result = 0')
        write('')

        for name, bit in nameBits:
            write('if (is%s) {' % name.title())
            push()
            write('result |= 0x%04x' % bit)
            pop()
            write('}')

        write('')
        write('output.writeShort(result)')

        pop()
        write('}')
        write('')

        # deserialize
        write('def deserialize(input: DataInputStream) {')
        push()
        write('val flags = input.readUnsignedShort()')
        write('')
        for name, bit in nameBits:
            write('is%s = ((flags & 0x%04x) != 0)' % (name.title(), bit))
        pop()
        write('}')

        pop()
        write ('}')

    f = open('access_flags.scala', 'w')
    f.write(w.body())
    f.close()


if __name__ == '__main__':
    main()
