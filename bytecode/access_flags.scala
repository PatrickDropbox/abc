// AUTO-GENERATED BY gen_access_flags.py
import java.io.DataInputStream
import java.io.DataOutputStream
import java.util.Vector
import scala.collection.JavaConversions._

// see table 4.1-A / page 71-72
class ClassAccessFlags {
    var isPublic = false
    var isFinal = false
    var isSuper = false
    var isInterface = false
    var isAbstract = false
    var isSynthetic = false
    var isAnnotation = false
    var isEnum = false

    def debugString(): String = {
        var flagStrings = new Vector[String]()

        if (isPublic) {
            flagStrings.add("PUBLIC")
        }
        if (isFinal) {
            flagStrings.add("FINAL")
        }
        if (isSuper) {
            flagStrings.add("SUPER")
        }
        if (isInterface) {
            flagStrings.add("INTERFACE")
        }
        if (isAbstract) {
            flagStrings.add("ABSTRACT")
        }
        if (isSynthetic) {
            flagStrings.add("SYNTHETIC")
        }
        if (isAnnotation) {
            flagStrings.add("ANNOTATION")
        }
        if (isEnum) {
            flagStrings.add("ENUM")
        }

        var result = ""
        for (s <- flagStrings) {
            if (result.equals("")) {
                result = s
            } else {
                result += ", " + s
            }
        }

        return result
    }

    def serialize(output: DataOutputStream) {
        var result = 0

        if (isPublic) {
            result |= 0x0001
        }
        if (isFinal) {
            result |= 0x0010
        }
        if (isSuper) {
            result |= 0x0020
        }
        if (isInterface) {
            result |= 0x0200
        }
        if (isAbstract) {
            result |= 0x0400
        }
        if (isSynthetic) {
            result |= 0x1000
        }
        if (isAnnotation) {
            result |= 0x2000
        }
        if (isEnum) {
            result |= 0x4000
        }

        output.writeShort(result)
    }

    def deserialize(input: DataInputStream) {
        val flags = input.readUnsignedShort()

        isPublic = ((flags & 0x0001) != 0)
        isFinal = ((flags & 0x0010) != 0)
        isSuper = ((flags & 0x0020) != 0)
        isInterface = ((flags & 0x0200) != 0)
        isAbstract = ((flags & 0x0400) != 0)
        isSynthetic = ((flags & 0x1000) != 0)
        isAnnotation = ((flags & 0x2000) != 0)
        isEnum = ((flags & 0x4000) != 0)
    }
}